import 'base'
import 'product'
import 'customer'
import 'salesperson'
import 'voucher'

model User extends Base {
  @@map("user")
  username              String           @unique() @db.VarChar(20)
  email                 String           @unique() @db.VarChar(50)
  password              String           @db.VarChar(256)

  userRoles             UserRole[]       @relation("UserRoleAssigned")
  assignedRoles         UserRole[]       @relation("UserRoleAssigner")

  createdBy             User?            @relation("UserCreator", fields: [createdById], references: [id])
  creatorOf             User[]           @relation("UserCreator")

  updatedBy             User?            @relation("UserUpdater", fields: [updatedById], references: [id])
  updaterOf             User[]           @relation("UserUpdater")

  deletedBy             User?            @relation("UserDeleter", fields: [deletedById], references: [id])
  deleterOf             User[]           @relation("UserDeleter")

  productCreated        Product[]        @relation("ProductCreator")
  productUpdated        Product[]        @relation("ProductUpdater")
  productDeleted        Product[]        @relation("ProductDeleter")
  productCodeCreated    ProductCode[]    @relation("ProductCodeCreator")
  productCodeUpdated    ProductCode[]    @relation("ProductCodeUpdater")
  productCodeDeleted    ProductCode[]    @relation("ProductCodeDeleter")

  customerCreated       Customer[]       @relation("CustomerCreator")
  customerUpdated       Customer[]       @relation("CustomerUpdater")
  customerDeleted       Customer[]       @relation("CustomerDeleter")
  CustomerLogCreator    CustomerLog[]    @relation("CustomerLogCreator")

  salespersonCreated    Salesperson[]    @relation("SalespersonCreator")
  salespersonUpdated    Salesperson[]    @relation("SalespersonUpdater")
  salespersonDeleted    Salesperson[]    @relation("SalespersonDeleter")
  SalespersonLogCreator SalespersonLog[] @relation("SalespersonLogCreator")

  voucherCreated        Voucher[]        @relation("VoucherCreator")
  voucherUpdated        Voucher[]        @relation("VoucherUpdater")
  voucherDeleted        Voucher[]        @relation("VoucherDeleter")
  voucherLogCreator     VoucherLog[]     @relation("VoucherLogCreator")
  voucherItemCreated    VoucherItem[]    @relation("VoucherItemCreator")
  voucherItemUpdated    VoucherItem[]    @relation("VoucherItemUpdater")
  voucherItemDeleted    VoucherItem[]    @relation("VoucherItemDeleter")
}

model Role {
  @@map("role")
  id          String     @id @default(cuid()) // Unique identifier for the role
  name        String     @unique @db.VarChar(50) // Role name (Admin, Manager, etc.)
  description String?    @db.VarChar(255) // Role description

  userRoles   UserRole[]
}

model UserRole {
  @@map("user_role")

  id           String    @id @default(cuid())
  assignedAt   DateTime  @default(now())
  deletedAt    DateTime?

  user         User      @relation('UserRoleAssigned', fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  role         Role      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId       String

  assignedBy   User?     @relation("UserRoleAssigner", fields: [assignedById], references: [id], onDelete: Restrict)
  assignedById String?

  @@unique([userId, roleId]) // Ensure a user cannot have the same role twice
}