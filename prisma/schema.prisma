//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Admin
  Manager
  Staff
  Developer
}

model User {
  id                    String           @id() @default(cuid())
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt() @map("updated_at")
  deletedAt             DateTime?        @map("deleted_at")
  createdById           String?          @map("created_by")
  updatedById           String?          @map("updated_by")
  deletedById           String?          @map("deleted_by")
  username              String           @unique() @db.VarChar(20)
  email                 String           @unique() @db.VarChar(50)
  password              String           @db.VarChar(100)
  roles                 Role[]
  createdBy             User?            @relation("UserCreator", fields: [createdById], references: [id])
  creatorOf             User[]           @relation("UserCreator")
  updatedBy             User?            @relation("UserUpdater", fields: [updatedById], references: [id])
  updaterOf             User[]           @relation("UserUpdater")
  deletedBy             User?            @relation("UserDeleter", fields: [deletedById], references: [id])
  deleterOf             User[]           @relation("UserDeleter")
  productCreated        Product[]        @relation("ProductCreator")
  productUpdated        Product[]        @relation("ProductUpdater")
  productDeleted        Product[]        @relation("ProductDeleter")
  productCodeCreated    ProductCode[]    @relation("ProductCodeCreator")
  productCodeUpdated    ProductCode[]    @relation("ProductCodeUpdater")
  productCodeDeleted    ProductCode[]    @relation("ProductCodeDeleter")
  customerCreated       Customer[]       @relation("CustomerCreator")
  customerUpdated       Customer[]       @relation("CustomerUpdater")
  customerDeleted       Customer[]       @relation("CustomerDeleter")
  CustomerLogCreator    CustomerLog[]    @relation("CustomerLogCreator")
  salespersonCreated    Salesperson[]    @relation("SalespersonCreator")
  salespersonUpdated    Salesperson[]    @relation("SalespersonUpdater")
  salespersonDeleted    Salesperson[]    @relation("SalespersonDeleter")
  SalespersonLogCreator SalespersonLog[] @relation("SalespersonLogCreator")
  voucherCreated        Voucher[]        @relation("VoucherCreator")
  voucherUpdated        Voucher[]        @relation("VoucherUpdater")
  voucherDeleted        Voucher[]        @relation("VoucherDeleter")
  VoucherLogCreator     VoucherLog[]     @relation("VoucherLogCreator")

  @@map("user")
}

model Product {
  id          String        @id() @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  createdById String?       @map("created_by")
  updatedById String?       @map("updated_by")
  deletedById String?       @map("deleted_by")
  name        String
  codes       ProductCode[]
  createdBy   User?         @relation("ProductCreator", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?         @relation("ProductUpdater", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedBy   User?         @relation("ProductDeleter", fields: [deletedById], references: [id], onDelete: SetNull)
  voucherItem VoucherItem[] @relation("VoucherProduct")

  @@map("product")
}

model ProductCode {
  id          String    @id() @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  createdById String?   @map("created_by")
  updatedById String?   @map("updated_by")
  deletedById String?   @map("deleted_by")
  code        Int       @unique() @default(autoincrement())
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdBy   User?     @relation("ProductCodeCreator", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?     @relation("ProductCodeUpdater", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedBy   User?     @relation("ProductCodeDeleter", fields: [deletedById], references: [id], onDelete: SetNull)

  @@map("product_code")
}

model Voucher {
  id           String            @id() @default(cuid())
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt() @map("updated_at")
  deletedAt    DateTime?         @map("deleted_at")
  createdById  String?           @map("created_by")
  updatedById  String?           @map("updated_by")
  deletedById  String?           @map("deleted_by")
  number       Int               @unique() @default(autoincrement())
  approvedDate DateTime?         @map("approved_date")
  rejectedDate DateTime?         @map("rejected_date")
  customerId   String
  Customer     Customer          @relation("VoucherCustomer", fields: [customerId], references: [id])
  returnTypeId Int
  ReturnType   VoucherReturnType @relation("VoucherReturnType", fields: [returnTypeId], references: [id])
  statusId     Int
  Status       VoucherStatus     @relation("VoucherStatus", fields: [statusId], references: [id])
  createdBy    User?             @relation("VoucherCreator", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy    User?             @relation("VoucherUpdater", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedBy    User?             @relation("VoucherDeleter", fields: [deletedById], references: [id], onDelete: SetNull)
  items        VoucherItem[]
  logs         VoucherLog[]      @relation("VoucherLog")

  @@map("voucher")
}

model VoucherItem {
  id             String    @id() @default(cuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt() @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  createdById    String?   @map("created_by")
  updatedById    String?   @map("updated_by")
  deletedById    String?   @map("deleted_by")
  quantity       Int       @default(0)
  expirationDate DateTime? @map("expiration_date")
  observation    String?   @default("") @db.Text()
  received       Boolean   @default(false)
  productId      String
  Product        Product   @relation("VoucherProduct", fields: [productId], references: [id])
  voucherId      String
  Voucher        Voucher   @relation(fields: [voucherId], references: [id])

  @@index([productId], name: "voucher_item_product_id")
  @@map("voucher_item")
}

model VoucherLog {
  id          String   @id() @default(cuid())
  message     String
  createdAt   DateTime @default(now()) @map("created_at")
  createdById String   @map("created_by_id")
  voucherId   String
  Voucher     Voucher  @relation("VoucherLog", fields: [voucherId], references: [id])
  userId      String
  User        User     @relation("VoucherLogCreator", fields: [userId], references: [id])

  @@map("voucher_log")
}

model VoucherReturnType {
  id        Int       @id() @default(autoincrement())
  name      String    @db.VarChar(255)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  Vouchers  Voucher[] @relation("VoucherReturnType")

  @@map("voucher_return_type")
}

model VoucherStatus {
  id        Int       @id() @default(autoincrement())
  name      String    @db.VarChar(255)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  Vouchers  Voucher[] @relation("VoucherStatus")

  @@map("voucher_status")
}

model Customer {
  id          String        @id() @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt() @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  createdById String?       @map("created_by")
  updatedById String?       @map("updated_by")
  deletedById String?       @map("deleted_by")
  code        Int           @unique() @default(autoincrement())
  name        String        @db.VarChar(100)
  address     String        @db.VarChar(1000)
  logs        CustomerLog[]
  createdBy   User?         @relation("CustomerCreator", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?         @relation("CustomerUpdater", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedBy   User?         @relation("CustomerDeleter", fields: [deletedById], references: [id], onDelete: SetNull)
  Vouchers    Voucher[]     @relation("VoucherCustomer")

  @@map("customer")
}

model CustomerLog {
  id          String   @id() @default(cuid())
  message     String
  createdAt   DateTime @default(now()) @map("created_at")
  createdById String   @map("created_by_id")
  customerId  String   @map("customer_id")
  customer    Customer @relation(fields: [customerId], references: [id])
  createdBy   User?    @relation("CustomerLogCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("customer_log")
}

model Salesperson {
  id          String           @id() @default(cuid())
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt() @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")
  createdById String?          @map("created_by")
  updatedById String?          @map("updated_by")
  deletedById String?          @map("deleted_by")
  code        Int              @unique() @default(autoincrement())
  name        String           @db.VarChar(100)
  logs        SalespersonLog[]
  createdBy   User?            @relation("SalespersonCreator", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?            @relation("SalespersonUpdater", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedBy   User?            @relation("SalespersonDeleter", fields: [deletedById], references: [id], onDelete: SetNull)

  @@map("salesperson")
}

model SalespersonLog {
  id            String      @id() @default(cuid())
  message       String
  createdAt     DateTime    @default(now()) @map("created_at")
  createdById   String      @map("created_by_id")
  salespersonId String      @map("salesperson_id")
  salesperson   Salesperson @relation(fields: [salespersonId], references: [id])
  createdBy     User?       @relation("SalespersonLogCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("salesperson_log")
}
